{"version":3,"sources":["serviceWorker.js","i18n/messages/index.js","hocs/withMaterialUI.js","redux/appStore/types/index.js","redux/appStore/actions/index.js","hocs/withAppStoreProps.js","forms/ContactForm/formModel.js","forms/ContactForm/styles.js","forms/ContactForm/FormView.js","forms/ContactForm/validationSchema.js","forms/ContactForm/index.js","forms/ContactForm/FormController.js","components/Home.js","components/About.js","components/Menu.js","components/TopBar.js","router/index.js","router/styles.js","App.js","redux/appStore/state.js","redux/index.js","redux/appStore/reducers/index.js","utils/createReduxStore.js","i18n/index.js","index.js"],"names":["Boolean","window","location","hostname","match","messages","fa","en","enMessages","withMaterialUI","Component","props","theme","createMuiTheme","palette","secondary","main","blue","primary","indigo","typography","useNextVariants","fontFamily","join","react_default","a","createElement","core_styles","CssBaseline_default","types","CHANGE_LOCALE","changeLocale","locale","type","TYPES","payload","mapStateToProps","state","selectedLocale","appStore","withAppStoreProps","connect","formModel","inputs","name","i18nLabelID","multiline","icon","People","inputProps","Email","Message","initialValues","fullName","emailAddress","message","styles","input","margin","spacing","unit","FormView","e","_this$props","this","handleChange","setFieldTouched","persist","_this","_this$props2","values","errors","touched","classes","map","id","index_es","key","localeMessage","Grid_default","item","xs","sm","md","TextField_default","label","concat","value","error","helperText","fullWidth","InputProps","Object","objectSpread","endAdornment","InputAdornment_default","position","onChange","handleInputChange","bind","className","_this$props3","isValid","handleSubmit","isSubmitting","Button_default","size","variant","color","disabled","onClick","container","direction","justify","alignItems","renderInputFields","renderFormFooter","withStyles","validationSchema","Yup","required","email","react","formik_esm","render","ContactForm_FormView","assign","onSubmit","_ref","setSubmitting","resetForm","setTimeout","console","log","Home","ContactForm","About","Typography_default","section","href","target","rel","link","textDecoration","Menu","pathname","Group","TopBar","availableLocales","globalConfig","index","ListItem_default","button","ListItemIcon_default","dist_index_es","code","countryCode","svg","ListItemText_default","localeDisplayName","MenuItems","menu","Link","to","menuLinks","root","AppBar_default","appBar","Toolbar_default","noWrap","brandLink","Drawer_default","drawer","paper","drawerPaper","anchor","toolbar","List_default","renderMenuItems","Divider_default","renderChangeLocaleLink","display","zIndex","width","flexShrink","content","flexGrow","padding","mixins","RootRouter","BrowserRouter","layout","heroContent","components_TopBar","Paper_default","elevation","Switch","Route","path","component","exact","@global","body","backgroundColor","gutters","paddingTop","paddingBottom","marginTop","defineProperty","marginLeft","marginRight","breakpoints","up","maxWidth","App","Helmet","encodeSpecialCharacters","lang","dir","appTitle","appDescription","router","defaultLocale","filter","default","length","getDefaultLocale","combineReducers","arguments","undefined","initialState","action","createLogger","localeData","enLocaleData","faLocaleData","store","enhancers","applyMiddleware","thunkMiddleware","createStore","rootReducer","forEach","addLocaleData","ReactDOM","es","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.bdf7fa86.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import enMessages from './en.json';\nimport faMessages from './fa.json';\n\nconst messages = {\n  'fa': faMessages,\n  'en': enMessages\n};\n\nexport default messages;","import React from 'react';\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport { blue, indigo } from '@material-ui/core/colors'\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nfunction withMaterialUI(Component) {\n  function WithMaterialUI(props) {    \n    // Create a theme instance.\n    const theme = createMuiTheme({\n      palette: {\n        secondary: {\n          main: blue[900]\n        },\n        primary: {\n          main: indigo[700]\n        }\n      },\n      typography: {\n        useNextVariants: true,\n        // Use the system font instead of the default Roboto font.\n        fontFamily: [\n          '\"Lato\"',\n          'sans-serif'\n        ].join(',')\n      }\n    });\n    return (\n      <MuiThemeProvider theme={theme}>\n        <CssBaseline />\n        <Component {...props} />\n      </MuiThemeProvider>\n    );\n  }\n\n  return WithMaterialUI;\n}\n\nexport default withMaterialUI;","const types = {\n  CHANGE_LOCALE: 'change_locale',\n};\n\nexport default types;\n","import TYPES from './../types';\n\nexport const changeLocale = ( locale ) => {\n  return {\n    type: TYPES.CHANGE_LOCALE,\n    payload: locale,\n  };\n};","import React from 'react';\nimport { connect } from 'react-redux';\nimport { changeLocale } from './../redux/appStore/actions';\n\nconst mapStateToProps = (state) => {\n  return{\n    selectedLocale: state.appStore.selectedLocale\n  }\n};\nfunction withAppStoreProps(Component) {\n  function WithAppStoreProps(props) {\n    return (\n      <Component {...props} />\n    );\n  }\n\n  return connect(mapStateToProps, { changeLocale })(WithAppStoreProps);\n}\n\nexport default withAppStoreProps;","import {\n  People,\n  Email,\n  Message\n} from \"@material-ui/icons\";\n\nexport const formModel = {\n  inputs: [\n    {\n      name: \"fullName\",\n      i18nLabelID: \"contactForm.name\",\n      multiline: false,\n      icon: People,\n      inputProps: {\n        type: \"text\",\n      }\n    },\n    {\n      name: \"emailAddress\",\n      i18nLabelID: \"contactForm.emailAddress\",\n      multiline: false,\n      icon: Email,\n      inputProps: {\n        type: \"email\",\n      }\n    },\n    {\n      name: \"message\",\n      i18nLabelID: \"contactForm.message\",\n      multiline: true,\n      icon: Message,\n      inputProps: {\n        type: \"text\",\n      }\n    }\n  ],\n  initialValues: {\n    fullName: \"\",\n    emailAddress: \"\",\n    message: \"\"\n  },\n};","const styles = theme => ({\n  input: {\n    margin: theme.spacing.unit * 2,\n  },\n});\nexport default styles;","import React, { Component } from 'react';\nimport { FormattedMessage } from 'react-intl';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\nimport TextField from '@material-ui/core/TextField';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { formModel } from './formModel';\nimport styles from './styles';\n\nclass FormView extends Component {\n  handleInputChange(name, e){\n    const {\n      handleChange,\n      setFieldTouched\n    } = this.props;\n    e.persist();\n    handleChange(e);\n    setFieldTouched(name, true, false);\n  }\n  renderInputFields(){\n    const {\n      values,\n      errors,\n      touched,\n      classes,\n      selectedLocale\n    } = this.props;\n    const renderedInputFields =\n      formModel.inputs.map((input, id) => {\n        return(\n          <FormattedMessage \n            key={selectedLocale.locale + id}\n            id={input.i18nLabelID}\n            >\n            { (localeMessage) => \n                <Grid\n                  item\n                  xs={12}\n                  sm={12}\n                  md={12}\n                >\n                  <TextField\n                    label={`${localeMessage}`}\n                    id={input.name}\n                    name={input.name}\n                    value={values[input.name]}\n                    error={touched[input.name] && Boolean(errors[input.name])}\n                    helperText={\n                      (touched[input.name] && errors[input.name]) \n                      ? <FormattedMessage id={errors[input.name]} />\n                      : null\n                    }\n                    fullWidth\n                    multiline={input.multiline}\n                    InputProps={{\n                      endAdornment: (\n                        <InputAdornment position=\"end\">\n                          <input.icon  />\n                        </InputAdornment>\n                      ),\n                      ...input.inputProps\n                    }}\n                    onChange={\n                      this.handleInputChange.bind(this, input.name)\n                    }\n                    className={classes.input}\n                  />\n              </Grid>\n            }\n          </FormattedMessage>\n        );\n      });\n    return renderedInputFields;\n  }\n  renderFormFooter(){\n    const { \n      isValid, \n      handleSubmit,\n      classes,\n      isSubmitting\n    } = this.props;\n    return(\n      <Button  \n        size=\"large\"\n        variant=\"contained\" \n        color=\"primary\"\n        disabled={!isValid || isSubmitting}\n        onClick={handleSubmit}\n        className={classes.input}\n        >\n        {\n          (isSubmitting)\n          ? <FormattedMessage id=\"contactForm.submiting\"/>\n          : <FormattedMessage id=\"contactForm.submit\"/>\n        }\n      </Button>\n    );\n  }\n  render() {\n    return(\n      <form >\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          { this.renderInputFields() }\n        </Grid>\n        <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n          <Grid\n            item\n            xs={12}\n            sm={12}\n            md={12}\n          >\n            { this.renderFormFooter() }\n          </Grid>\n        </Grid>\n      </form>\n    );\n  }\n}\n\nexport default withStyles(styles)(FormView);","import * as Yup from \"yup\";\n\nexport const validationSchema = \n  Yup.object({\n    fullName: \n      Yup.string(\"contactForm.fullName.helperText.default\")\n        .required(\"contactForm.fullName.helperText.required\"),\n    emailAddress: \n      Yup.string(\"contactForm.emailAddress.helperText.default\")\n        .email(\"contactForm.emailAddress.helperText.email\")\n        .required(\"contactForm.emailAddress.helperText.default\"),\n    message: \n      Yup.string(\"contactForm.message.helperText.default\")\n        .required(\"contactForm.message.helperText.required\"),\n  });","import ContactForm from './FormController';\nimport withAppStoreProps from '../../hocs/withAppStoreProps';\n\nexport default withAppStoreProps(ContactForm);","import React, { Component, Fragment } from 'react';\nimport { Formik } from \"formik\";\nimport FormView from './FormView';\nimport { formModel } from './formModel';\nimport { validationSchema } from './validationSchema';\n\nclass FormController extends Component {\n  \n  render() {\n    const { selectedLocale } = this.props;\n    return(\n      <Fragment>\n        <Formik\n          render={\n            props =>\n              <FormView \n                {...props} \n                selectedLocale={selectedLocale} \n              /> \n          }\n          initialValues={formModel.initialValues}\n          validationSchema={validationSchema}\n          onSubmit={(values, { setSubmitting, resetForm }) => {\n            const message = { ...values };\n            setTimeout(() => {\n              // Do some async tasks\n              console.log(message)\n              setSubmitting(false);\n              resetForm();\n            }, 3000);\n          }}\n        />\n      </Fragment>\n    );\n  }\n}\n\nexport default FormController;","import React, { Component } from 'react';\nimport ContactForm from './../forms/ContactForm';\n\nclass Home extends Component {\n  render() {\n    return (\n      <ContactForm />\n    );\n  }\n}\n\nexport default Home;","import React, { Component, Fragment } from 'react';\nimport Typography from '@material-ui/core/Typography';\nimport { FormattedMessage } from 'react-intl';\nimport Button from '@material-ui/core/Button';\nimport withStyles from \"@material-ui/core/styles/withStyles\";\n\nclass About extends Component {\n  render() {\n    const { classes } = this.props;\n    return (\n      <Fragment>\n        <Typography variant=\"h6\" color=\"inherit\" className={classes.section}>\n          <FormattedMessage id=\"about\" />\n        </Typography>\n        <Button  \n          size=\"large\"\n          variant=\"contained\" \n          color=\"primary\"\n          className={classes.section}\n          >\n          <a href=\"https://www.bitsnbytes.ir\" target=\"_blank\" rel=\"noopener noreferrer\" className={classes.link}>\n            <FormattedMessage id=\"about.website\" />\n          </a>\n        </Button>\n      </Fragment>\n    );\n  }\n}\n\nconst styles = theme => ({\n  section: {\n    margin: theme.spacing.unit * 2,\n  },\n  link: {\n    color: \"white\",\n    textDecoration: \"none\"\n  }\n});\n\nexport default withStyles(styles)(About);","import Home from '@material-ui/icons/Home';\nimport Group from '@material-ui/icons/Group';\n\nconst Menu = [\n  {\n    label: \"menu.home\",\n    pathname: \"/\",\n    icon: Home,\n  },\n  {\n    label: \"menu.about\",\n    pathname: \"/about\",\n    icon: Group,\n  },\n];\n\nexport default Menu;","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport { withStyles } from '@material-ui/core/styles';\nimport Drawer from '@material-ui/core/Drawer';\nimport AppBar from '@material-ui/core/AppBar';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport List from '@material-ui/core/List';\nimport Typography from '@material-ui/core/Typography';\nimport Divider from '@material-ui/core/Divider';\nimport ListItem from '@material-ui/core/ListItem';\nimport ListItemIcon from '@material-ui/core/ListItemIcon';\nimport ListItemText from '@material-ui/core/ListItemText';\nimport { FormattedMessage } from 'react-intl';\nimport ReactCountryFlag from \"react-country-flag\";\n\nimport globalConfig from './../config/config.global.json';\nimport MenuItems from './Menu';\nimport withAppStoreProps from '../hocs/withAppStoreProps';\n\nconst drawerWidth = 240;\n\nconst styles = theme => ({\n  root: {\n    display: 'flex',\n  },\n  appBar: {\n    zIndex: theme.zIndex.drawer + 1,\n  },\n  drawer: {\n    width: drawerWidth,\n    flexShrink: 0,\n  },\n  drawerPaper: {\n    width: drawerWidth,\n  },\n  content: {\n    flexGrow: 1,\n    padding: theme.spacing.unit * 3,\n  },\n  toolbar: theme.mixins.toolbar,\n  menuLinks: {\n    textDecoration: 'none'\n  },\n  brandLink: {\n    textDecoration: 'none',\n    color: 'white'\n  }\n});\n\nclass TopBar extends Component{\n  renderChangeLocaleLink(){\n    const { availableLocales } = globalConfig;\n    const { selectedLocale, changeLocale } = this.props;\n    return availableLocales.map((locale, index) => {\n      return(\n        <ListItem \n          button\n          key={index}\n          disabled={\n            (locale.locale === selectedLocale.locale)\n          }\n          onClick={\n            () => changeLocale(locale.locale)\n          }\n          >\n          <ListItemIcon>\n            <ReactCountryFlag\n              code={locale.countryCode}\n              svg={true}\n            />\n            </ListItemIcon>\n          <ListItemText primary={locale.localeDisplayName} />\n        </ListItem>\n      );\n    });\n  }\n  renderMenuItems(){\n    const { classes } = this.props\n    return MenuItems.map((menu, index) => {\n      return(\n        <FormattedMessage id={menu.label} key={index}>\n          {\n            (label) => {\n              return(\n                <Link to={menu.pathname} className={classes.menuLinks}>\n                  <ListItem button>\n                    <ListItemIcon>\n                      <menu.icon />\n                    </ListItemIcon>\n                    <ListItemText primary={label} />\n                  </ListItem>\n                </Link>\n              )\n            }\n          }\n        </FormattedMessage>\n      );\n    });\n  }\n  render(){\n    const { classes, selectedLocale } = this.props;\n  return (\n    <div className={classes.root}>\n      <AppBar position=\"fixed\" className={classes.appBar}>\n        <Toolbar>\n          <Typography variant=\"h6\" color=\"inherit\" noWrap>\n            <a href=\"https://www.bitsnbytes.ir\" target=\"_blank\" rel=\"noopener noreferrer\" className={classes.brandLink}>\n              <FormattedMessage id=\"app.author\" />\n            </a>\n          </Typography>\n        </Toolbar>\n      </AppBar>\n      \n      <Drawer\n        className={classes.drawer}\n        variant=\"permanent\"\n        classes={{\n          paper: classes.drawerPaper,\n        }}\n        anchor={\n          (selectedLocale.direction === \"ltr\")? \"left\": \"right\"\n        }\n      >\n        <div className={classes.toolbar} />\n        <List>\n          { this.renderMenuItems() }\n        </List>\n        <Divider />\n        <List>\n          { this.renderChangeLocaleLink() }\n        </List>\n      </Drawer>\n    </div>\n  );\n  }\n}\n  \n\nTopBar.propTypes = {\n  classes: PropTypes.object.isRequired,\n};\n\nexport default withAppStoreProps(withStyles(styles)(TopBar));","import React, { Component } from 'react';\nimport {\n  BrowserRouter as Router,\n  Route,\n  Switch,\n} from \"react-router-dom\";\nimport Home from './../components/Home';\nimport About from './../components/About';\nimport { withStyles } from '@material-ui/core/styles';\nimport Paper from '@material-ui/core/Paper';\nimport TopBar from './../components/TopBar';\nimport styles from './styles';\n\n\nclass RootRouter extends Component{\n  render(){\n    const { classes } = this.props;\n    return(\n      <Router>\n        <main className={classes.layout}>\n          <div className={classes.heroContent}>\n            <TopBar />\n            <Paper className={classes.root} elevation={1}>\n              <Switch>\n                <Route path=\"/\" component={Home} exact />\n                <Route path=\"/about\" component={About} />\n              </Switch>\n            </Paper>\n          </div>\n        </main>\n      </Router>\n    );\n  }\n}\nexport default withStyles(styles)(RootRouter);","export default (theme) => ({\n    '@global': {\n      body: {\n        backgroundColor: \"#eeeeee\",\n      },\n    },\n    root: {\n      ...theme.mixins.gutters(),\n      paddingTop: theme.spacing.unit * 2,\n      paddingBottom: theme.spacing.unit * 2,\n      marginTop: theme.spacing.unit * 2,\n    },\n    layout: {\n      width: 'auto',\n      marginLeft: theme.spacing.unit * 3,\n      marginRight: theme.spacing.unit * 3,\n      [theme.breakpoints.up(900 + theme.spacing.unit * 3 * 2)]: {\n        width: 900,\n        marginLeft: 'auto',\n        marginRight: 'auto',\n      },\n    },\n    heroContent: {\n      maxWidth: 600,\n      margin: '0 auto',\n      padding: `${theme.spacing.unit * 8}px 0 ${theme.spacing.unit * 6}px`,\n    }\n});","import React, { Component, Fragment } from 'react';\nimport { IntlProvider } from 'react-intl';\nimport { Helmet } from 'react-helmet';\nimport { withStyles } from '@material-ui/core/styles';\n\nimport messages from './i18n/messages';\nimport withMaterialUI from './hocs/withMaterialUI';\nimport withAppStoreProps from './hocs/withAppStoreProps';\nimport RootRouter from './router';\n\nclass App extends Component {\n  render() {\n    const { selectedLocale } = this.props;\n    return (\n      <IntlProvider\n        locale={selectedLocale.locale}\n        messages={messages[selectedLocale.locale]}\n        >\n        <Fragment>\n          <Helmet\n            encodeSpecialCharacters={true}  \n            >\n            <html lang={selectedLocale.locale} />\n            <body dir={selectedLocale.direction} />\n            <title>{selectedLocale.appTitle}</title>\n            <meta name=\"description\" content={selectedLocale.appDescription} />\n          </Helmet>\n            <RootRouter />\n        </Fragment>\n      </IntlProvider>\n    );\n  }\n}\n\nconst styles = theme => ({\n  root: {\n    ...theme.mixins.gutters(),\n    paddingTop: theme.spacing.unit * 2,\n    paddingBottom: theme.spacing.unit * 2,\n  },\n});\n\nexport default withAppStoreProps(withMaterialUI(withStyles(styles)(App)));\n","import globalConfig from './../../config/config.global.json';\nimport { filter } from 'lodash';\n\nfunction getDefaultLocale(){\n  const defaultLocale = \n    filter(globalConfig.availableLocales, { default: true });\n  return (defaultLocale.length)? defaultLocale[0] : null;\n}\n\nconst state = {\n  selectedLocale: getDefaultLocale(),\n};\nexport default state;\n","import { combineReducers } from 'redux';\n\n\nimport appStoreReducer from './appStore/reducers';\n\nexport default combineReducers({\n  appStore : appStoreReducer,\n});\n","import { filter } from 'lodash';\nimport initialState from './../state';\nimport TYPES from './../types';\nimport globalConfig from './../../../config/config.global.json';\n\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case TYPES.CHANGE_LOCALE:\n      if (isLocaleSupported(action.payload)) {\n        const selectedLocale =\n          filter(globalConfig.availableLocales, { locale: action.payload });\n        return { ...state, selectedLocale: { ...selectedLocale[0] } };\n      }\n      break;\n    default:\n      return state;\n  }\n};\n\nfunction isLocaleSupported(locale){\n  const obj = filter(globalConfig.availableLocales, { locale: locale });\n  return (obj.length)? true : false;\n}","import { createStore, applyMiddleware } from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport { createLogger } from 'redux-logger';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nimport rootReducer from './../redux';\n\n\nconst loggerMiddleware = createLogger();\n\nexport default function createReduxStore() {\n  let enhancers;\n\n  if (process.env.NODE_ENV !== 'production') {\n    \n    // loggerMiddleware must be the last middleware in chain to log actions\n    enhancers =\n      composeWithDevTools(\n        applyMiddleware(\n          thunkMiddleware, \n          loggerMiddleware,\n        )\n      );\n  } else {\n    enhancers = \n      applyMiddleware(\n        thunkMiddleware,\n      );\n  }\n\n  return createStore(rootReducer, enhancers);\n}\n","/* react-intl imports */\nimport { addLocaleData } from \"react-intl\";\n\n/* Import basic support for another locale if needed\n   ('en' is included by default) */\nimport enLocaleData from \"react-intl/locale-data/en\";\nimport faLocaleData from \"react-intl/locale-data/fa\";\n\nexport const localeData = [\n  enLocaleData,\n  faLocaleData\n];\n\nexport const addAppLocaleData = () =>\n  localeData.forEach(locale => addLocaleData(locale));\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { Provider as ReduxProvider } from \"react-redux\";\n\n\nimport * as serviceWorker from './serviceWorker';\nimport App from \"./App\";\nimport createStore from './utils/createReduxStore';\nimport { addAppLocaleData } from './i18n';\n\nconst store = createStore();\naddAppLocaleData();\n\nReactDOM.render(\n  <ReduxProvider store={store}>\n    <App />\n  </ReduxProvider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n\n"],"sourceRoot":""}